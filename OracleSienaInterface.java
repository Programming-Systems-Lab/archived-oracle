/**
* Title: OracleSienaInterface
* Description: This class provides an interface to the Siena. siena.jar
*			   must be included in the classpath.
* Copyright (c) 2000: The Trustees of Columbia University and the City of New York.
*							   All Rights Reserved.
* Company:		<p>
* @author Peppo Valetto
* @version 2.0
*/

package psl.oracle;

import java.io.*;
import java.net.*;
import java.lang.*;
import java.util.*;

import siena.*;
import psl.kx.*;

public class OracleSienaInterface implements Runnable, Notifiable {
  static Siena si = null;
  static MicroOracle microOracleHandle = null;
  static String sienaHost = "localhost";
  String hostname = null;
  static int sienaPort = 7130;
  PrintWriter log = null;

  /**
   * Constructor. It sets a Siena master server running at localhost and
   * 4321 port.
   */
  public OracleSienaInterface(String sienaURL) {
	String master;
	if (sienaURL == null || sienaURL.equals("") || sienaURL.equals("default"))
    	master = "senp://" + sienaHost + ":" + sienaPort;
    else
    	master = sienaURL;
    HierarchicalDispatcher hd = new HierarchicalDispatcher();
    try {
      hd.setMaster(master);
      System.out.println("Oracle master is " + master);
    } catch(siena.InvalidSenderException e) {
      e.printStackTrace();
    }
    catch(IOException ex) {
      ex.printStackTrace();
    }
    
    si = hd;
    
    try {
    	hostname = InetAddress.getLocalHost().getHostName();
    } catch (Exception e) {
       System.err.println("Exception occurred: " + e);
     }
  }
  
  public OracleSienaInterface() {
  	this("default");	
  }

  /**
   * Subscribes to an event generated by Metaparser.
   */

  public void run() {
    Filter f = new Filter();
    f.addConstraint("Source", "psl.metaparser.ParserThread");
    f.addConstraint("Type", "MPQuery");
    try {
      si.subscribe(f, this);
    } catch(siena.SienaException se) {
      se.printStackTrace();
    }
    System.out.println("Oracle subscribed to " + f);
  }

	static public void setOracleHandle (MicroOracle mo) { 
		System.err.println ("setting micro-oracle ...");
		microOracleHandle = mo;
		System.err.println  ("micro-oracle is " + mo.toString());
	}
	static public MicroOracle getOracleHandle () { return microOracleHandle; }
	

  /**
   * This method will generate an event for TriKX. It should be
   * called when Oracle wants to send a notification to TriKX
   * about a portal update.
   */

  public void generateTriKXEvent(String event) {
    Hashtable publishEvent = new Hashtable();
    publishEvent.put("Hostname", hostname);
    publishEvent.put("Type", "trikxEvent");
    publishEvent.put("TrikxEvent", event);
    int srcID = this.hashCode();
    Notification n1 = KXNotification.EDInputKXNotification("psl.oracle.OracleSienaInterface",srcID,publishEvent);
    System.out.println("Oracle is sending an update event to TriKX");
    try {
      si.publish(n1);
    } catch(siena.SienaException se) {
      se.printStackTrace();
    }
  }

  /**
   * Writes messages to a log file
   */

  public void printLog(String msg) {
    log.println("OracleSienaInterface: " + msg);
  }

  	private void processHint (String hint, String MPHost, int source, String request) {  		
  		String schema = microOracleHandle.getSchemaURL (hint);
  		String tagprocessor = microOracleHandle.getProcessorURL (hint);
  		
  		Hashtable publishEvent = new Hashtable();
  		publishEvent.put("Hostname", new AttributeValue(hostname));
	    int srcID = this.hashCode();
    	publishEvent.put("MPRequestID", new AttributeValue(request));
    	publishEvent.put("MPHostname", new AttributeValue(MPHost));
    	publishEvent.put("Value", new AttributeValue(schema));
  		
  		Notification n = KXNotification.OracleOutputKXNotification("psl.oracle.OracleSienaInterface",srcID,source,true,publishEvent);
   		n.putAttribute("TPModule", tagprocessor);
   		 try {
     		 System.out.println("Oracle is sending back a reply: " + n);
    		  si.publish(n);
   		 } catch(siena.SienaException se) {
      		se.printStackTrace();
    	}	
	}


  /**
   * This method will receive the events from the subscribed
   * components.
   */
  public void notify(Notification n) {
	AttributeValue av = n.getAttribute("Hostname");
   	String MPHost = av.stringValue();
 	av = n.getAttribute("Source");
	String MPSource = av.stringValue();
	av = n.getAttribute("SourceID");
	int MPSourceID = av.intValue();
	av = n.getAttribute("RequestID");
	String MPRequestID = av.stringValue();

  	AttributeValue hintAttr = n.getAttribute("useHint");
  	if (hintAttr != null) {
  		String hint = hintAttr.stringValue();
  		System.out.println("Oracle got a hint !! " + hint);	
  		processHint (hint, MPHost, MPSourceID, MPRequestID);

  	}
  	else {
    	System.out.println("Oracle error: MP query is null.");
    }
    
  }

  public void notify(Notification[] no) {}

}






