/**
* Title: OracleSienaInterface
* Description: This class provides an interface to the Siena. siena.jar
*			   must be included in the classpath.
* Copyright (c) 2000: The Trustees of Columbia University and the City of New York.
*							   All Rights Reserved.
* Company:		<p>
* @author Kanan Naik
* @version 1.0
*/

package psl.oracle;

import java.io.*;
import java.net.*;
import java.lang.*;
import java.util.*;

import siena.*;
import psl.kx.*;

public class OracleSienaInterface implements Runnable, Notifiable
{
        static Siena si = null;
        static String hostname = null;
        static String sienaPort = null;
        PrintWriter log = null;

	/**
	* Constructor. Set the specified Siena object as the default.
	*/
	public OracleSienaInterface(Siena s)
	{
		this.si = s;
	}

	/**
	* Constructor. It sets a Siena master server running at localhost and
	* 4321 port.
	*/
	public OracleSienaInterface()
	{
	    File file = new File("oracle.prop");
	    Properties property = new Properties();
	    try
	    {
	        property.load(new FileInputStream(file));
	    }
	    catch(FileNotFoundException ffe)
	    {
	        printLog("Exception: " + ffe);
	        System.exit(0);
	    }
	    catch(IOException ioe)
	    {
	        printLog("Exception: "+ ioe);
                System.exit(1);
            }
	    sienaPort = property.getProperty("sienaPort");
	    if(sienaPort == null || sienaPort.length() < 1)
	    {
	        printLog("Parameter 'sienaPort' must be set in 'oracle.prop' file.");
	        System.exit(0);
	    }
	    String master = "senp://localhost:4321";
	    HierarchicalDispatcher hd = new HierarchicalDispatcher();
	    try
	    {
	      	hd.setMaster(master);
	       	System.out.println("Oracle master is " + master);
	    }
	    catch(siena.InvalidSenderException e)
	    {
	       	e.printStackTrace();
	    }
	    catch(IOException ex)
	    {
	       	ex.printStackTrace();
	    }
	    OracleSienaInterface osi = new OracleSienaInterface(hd);
	    Thread t = new Thread(osi);
	    t.start();
	}


	/**
	* Siena master server can be specified as command line argument.
	* If no argument is specified then it will start it at localhost,
	* port 4321.
	*/
	public static void main(String[] args)
	{
	    if((args.length < 1) || (args.length > 2)) 
	    {
		System.out.println("Usage: java psl.oracle.OracleSienaInterface <port number> [<hostname>]");
		System.exit(1);
	    }
	    sienaPort = args[0];
	    if(sienaPort == null || sienaPort.length() < 1)
	    {

	        System.out.println("Usage: java psl.oracle.OracleSienaInterface <hostname> <port number>");
	        System.exit(0);
	    }
	    InetAddress addr = null;
	    try
	    {
  	      	addr = InetAddress.getLocalHost();
	    }
	    catch(Exception e)
	    {
           	System.err.println("Exception occurred: " + e);
	    }
            hostname = addr.getHostName();
	    SendWorklet sw = new SendWorklet(hostname, "OracleRegistry");
 	    String master = "senp://localhost:" + sienaPort ;
	    if (args.length > 1)
	    {
	       	master = "senp://" + args[1] + ":" + sienaPort;
	    }
	    final HierarchicalDispatcher hd = new HierarchicalDispatcher();
	    try
	    {
	      	hd.setMaster(master);
	       	System.out.println("Oracle master is " + master);
	    }
	    catch(siena.InvalidSenderException e)
	    {
	       	e.printStackTrace();
	    }
	    catch(IOException ex)
	     {
	       	ex.printStackTrace();
	     }
	     OracleSienaInterface osi = new OracleSienaInterface(hd);
	     Thread t = new Thread(osi);
	     t.start();
	     Runtime.getRuntime().addShutdownHook(new Thread()
	     {
	       	public void run()
	      	{
	      		 System.out.println("Unsubscribing Siena..");
	       		 hd.shutdown();
	       	}
	     });;
	}


	/**
	* Subscribes to an event generated by Metaparser.
	*/

	public void run()
	{
		Filter f = new Filter();
		f.addConstraint("Source", "psl.metaparser.ParserThread");
		f.addConstraint("Type", "MPQuery");
		try
		{
			si.subscribe(f, this);
		}
		catch(siena.SienaException se)
		{
			se.printStackTrace();
		}
		System.out.println("Oracle subscribed to " + f);
	}

	/**
	* This method is called when an event is received from Metaparser.
	* It will call getFragment(String query) method of Oracle. It will
	* generate a Siena event once a reply is received from Oracle.
	*/

	public void processMPQuery(String query, String MPHost, int MPSourceID, String MPRequestID)
	{
		Hashtable publishEvent = new Hashtable();
		SchemaFragment fragment = new SchemaFragment();
     		String moduleName = null;
		Oracle oracle = new Oracle();
 		String msg = null;
		boolean result = false;
		publishEvent.put("Hostname", hostname);
		int srcID = this.hashCode();
	  	publishEvent.put("MPRequestID", MPRequestID);
		publishEvent.put("MPHostname", MPHost);
		
		try
		{
			fragment = oracle.getFragment(query);
		}
		catch (UnknownTagException ex)
		{
			msg = "Exception occured at Oracle: " + ex;
		}
		catch (InvalidQueryFormatException e)
		{
			msg = "Exception occured at Oracle: " + e;
		}
		catch (InvalidSchemaFormatException e)
		{
			msg = "Exception occured at Oracle: " + e;
		}
		catch (Exception e)
		{
			msg = "Exception occured at Oracle: " + e;
		}
		if(msg == null) //no exception occurred while retrieving a fragment
		{
		      result = true;
    		      moduleName = fragment.getModuleName();
		      SchemaFragmentToXML sfx = new SchemaFragmentToXML();
		      msg = sfx.toXML(fragment);
		}
		publishEvent.put("Value", msg);

		//create a notification using KXNotification

     		Notification n = KXNotification.OracleOutputKXNotification("psl.oracle.OracleSienaInterface",srcID,MPSourceID,result,publishEvent);

		try
		{
			System.out.println("Oracle is sending back a reply: " + n);
			si.publish(n);
		}
		catch(siena.SienaException se)
		{
			se.printStackTrace();
		}
		if(moduleName.length() > 0)
		{
		      SendOracleReply sor = new SendOracleReply();
		      sor.sendReply(MPRequestID, MPHost, MPRequestID, moduleName);
		}

	}



	/**
	* This method will generate an event for TriKX. It should be
	* called when Oracle wants to send a notification to TriKX
	* about a portal update.
	*/

	public void generateTriKXEvent(String event)
	{
		Hashtable publishEvent = new Hashtable();
  		publishEvent.put("Hostname", hostname);
		publishEvent.put("Type", "trikxEvent");
		publishEvent.put("TrikxEvent", event);
		int srcID = this.hashCode();
		Notification n1 = KXNotification.EDInputKXNotification("psl.oracle.OracleSienaInterface",srcID,publishEvent);
		System.out.println("Oracle is sending an update event to TriKX");
		try
		{
			si.publish(n1);
		}
		catch(siena.SienaException se)
		{
			se.printStackTrace();
		}
	}

	/**
	* Writes messages to a log file
	*/

	public void printLog(String msg)
	{
		log.println("OracleSienaInterface: " + msg);
	}


	/**
	* This method will receive the events from the subscribed
	* components.
	*/
	public void notify(Notification n)
	{
		AttributeValue av = n.getAttribute("MPQuery");
		if (av != null)
		{
			String query = av.stringValue();
			System.out.println("Oracle got a query ");
			av = n.getAttribute("Hostname");
			String MPHost = av.stringValue();
			av = n.getAttribute("Source");
			String MPSource = av.stringValue();
			av = n.getAttribute("SourceID");
			int MPSourceID = av.intValue();
			av = n.getAttribute("RequestID");
			String MPRequestID = av.stringValue();
			processMPQuery(query, MPHost, MPSourceID, MPRequestID);
		}
		else
		{
			printLog("Oracle error: MP query is null.");
		}
	}



	public void notify(Notification[] no)
	{
	}

}



